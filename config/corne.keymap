/*
 * Copyrighm (c) 2020 The ZMK Contributors
 
//#include <dt-bindings/zmk/mouse.h>
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        the {
            bindings = <&the_chord>;
            key-positions = <20 19 15>;
            layers = <0>;
        };

        though {
            bindings = <&though>;
            key-positions = <20 19 14>;
            layers = <0>;
        };

        because {
            bindings = <&because>;
            key-positions = <30 15>;
            layers = <0>;
        };

        according {
            bindings = <&according>;
            key-positions = <13 14 8 9 18>;
            layers = <0>;
        };

        control_delete {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <16 37>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <13 14>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            label = "HML";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <0>;
            label = "HMR";
        };

        system_layer_toggle: system_layer_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "SYSTEM_LAYER_TOGGLE";
            #binding-cells = <0>;
            bindings = <&sl 2>, <&mo 5>;

            tapping-term-ms = <250>;
        };

        caps: caps {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS";
            #binding-cells = <0>;
            bindings = <&quick_release_sl 1>, <&caps_word>;

            tapping-term-ms = <250>;
        };

        quick_release_sl: quick_release_sl {
            compatible = "zmk,behavior-sticky-key";
            label = "QUICK_RELEASE_SL";
            bindings = <&mo>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
        };

        the_chord: the_chord {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
            label = "THE_CHORD";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        capital_qu: capital_qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Q) &kp U>;
            label = "CAPITAL_QU";
        };

        that: that {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp A &kp T>;
            label = "THAT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        because: because {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp B &kp E &kp C &kp A &kp U &kp S &kp E>;
            label = "BECAUSE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        which: which {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp W &kp H &kp I &kp C &kp H>;
            label = "WHICH";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        according: according {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp C &kp C &kp O &kp R &kp D &kp I &kp N &kp G>;
            label = "ACCORDING";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        though: though {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp O &kp U &kp G &kp H>;
            label = "THOUGH";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        turn_to_caps_layer: turn_to_caps_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "TURN_TO_CAPS_LAYER";
        };

        shift: shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "SHIFT";
        };

        vim_x: vim_x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp X>;
            label = "VIM_X";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp SEMI  &kp COMMA    &kp DOT               &kp P          &kp Y        &kp F        &kp G                &kp C            &kp R            &kp L  &trans
&none  &lt 4 A   &hml LGUI O  &hml LEFT_ALT E       &hml LCTRL I   &kp U        &kp D        &hmr LEFT_CONTROL H  &hmr LEFT_ALT T  &hmr LEFT_GUI N  &kp S  &trans
&mo 6  &kp SQT   &qu          &kp J                 &kp K          &kp X        &kp B        &kp M                &kp W            &kp V            &kp Z  &trans
                              &system_layer_toggle  &kp BACKSPACE  &kp ENTER    &key_repeat  &kp SPACE            &caps
            >;
        };

        shift_main_layer {
            bindings = <
&trans  &kp LS(COLON)  &kp LS(LT)       &kp LS(GT)            &kp LS(P)                &kp LS(Y)      &kp LS(F)    &kp LS(G)                &kp LS(C)            &kp LS(R)            &kp LS(L)  &trans
&trans  &kp LS(A)      &hml LGUI LS(O)  &hml LEFT_ALT LS(E)   &hml LEFT_CONTROL LS(I)  &kp LS(U)      &kp LS(D)    &hmr LEFT_CONTROL LS(H)  &hmr LEFT_ALT LS(T)  &hmr LEFT_GUI LS(N)  &kp LS(S)  &trans
&trans  &kp LS(DQT)    &capital_qu      &kp LS(J)             &kp LS(K)                &kp LS(X)      &kp LS(B)    &kp LS(M)                &kp LS(W)            &kp LS(V)            &kp LS(Z)  &trans
                                        &system_layer_toggle  &kp DELETE               &kp LS(RET)    &key_repeat  &kp SPACE                &kp LEFT_SHIFT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &trans  &trans            &trans            &kp LPAR             &kp GRAVE    &kp APOS  &kp RPAR              &kp EQUAL               &kp PLUS                &none         &none
&none  &kp N7  &hml LEFT_GUI N5  &hml LEFT_ALT N3  &hml LCTRL NUMBER_1  &kp N9       &kp N8    &hmr LEFT_CONTROL N0  &hmr LEFT_ALT NUMBER_2  &hmr LEFT_GUI NUMBER_4  &kp NUMBER_6  &none
&none  &none   &kp MINUS         &kp LS(UNDER)     &kp LEFT_BRACKET     &kp TAB      &kp BSLH  &kp RIGHT_BRACKET     &kp SLASH               &kp LS(PLUS)            &none         &none
                                 &trans            &trans               &trans       &trans    &trans                &caps
            >;
        };

        shift_lower {
            bindings = <
&trans  &trans         &trans                 &trans              &trans                         &kp LS(TILDE)    &kp LS(DQT)   &trans                      &trans                 &trans                &trans         &trans
&trans  &kp AMPERSAND  &hml LEFT_GUI PERCENT  &hml LEFT_ALT HASH  &hml LEFT_CONTROL EXCLAMATION  &trans           &kp LS(STAR)  &hmr LEFT_CONTROL QUESTION  &hmr LEFT_ALT AT_SIGN  &hmr LEFT_GUI DOLLAR  &kp LS(CARET)  &trans
&trans  &trans         &trans                 &trans              &kp LEFT_BRACE                 &trans           &trans        &kp LS(RIGHT_BRACE)         &kp PIPE               &none                 &trans         &trans
                                              &trans              &trans                         &trans           &trans        &trans                      &kp LEFT_SHIFT
            >;
        };

        vim_layer {
            bindings = <
&none  &kp K_POWER  &none     &none                          &kp PAGE_UP       &none          &none          &none                         &none           &none              &kp RIGHT  &none
&none  &none        &kp LGUI  &hml LEFT_ALT LC(RIGHT_ARROW)  &kp LEFT_CONTROL  &kp PAGE_UP    &kp PAGE_DOWN  &hmr LEFT_CONTROL LEFT_ARROW  &kp LEFT_ALT    &hmr LEFT_GUI END  &kp HOME   &none
&none  &none        &kp Q     &kp DOWN_ARROW                 &kp UP            &kp DELETE     &kp LC(LEFT)   &none                         &none           &none              &none      &none
                              &trans                         &trans            &trans         &trans         &trans                        &kp LEFT_SHIFT
            >;
        };

        system_layer {
            bindings = <
&kp F11  &kp F7      &kp F5             &kp F3            &kp F1                &kp F9                  &kp F8        &kp F10                       &kp F2                     &kp F4        &kp F6        &kp F12
&trans   &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC    &none         &mt LEFT_CONTROL PRINTSCREEN  &mt LEFT_ALT K_CALCULATOR  &none         &none         &bt BT_NXT
&none    &none       &none              &kp K_CALCULATOR  &kp PRINTSCREEN       &none                   &bt BT_SEL 4  &bt BT_SEL 3                  &bt BT_SEL 2               &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
                                        &trans            &trans                &trans                  &trans        &trans                        &kp LEFT_SHIFT
            >;
        };

        left_and_mouse_layer {
            bindings = <
&none   &kp LC(Q)  &kp LC(W)  &kp LC(T)       &kp LCTRL                &none        &none      &none           &none   &none  &mmv MOVE_RIGHT  &none
&none   &none      &kp LC(A)  &kp LC(C)       &hml LEFT_CONTROL LC(V)  &kp LC(R)    &kp LCTRL  &mmv MOVE_LEFT  &mo 9   &none  &none            &none
&trans  &none      &kp LC(Z)  &mmv MOVE_DOWN  &mmv MOVE_UP             &none        &none      &none           &none   &none  &none            &none
                              &trans          &trans                   &trans       &trans     &trans          &trans
            >;
        };

        excel_layer {
            bindings = <
&none   &tog 8  &kp N7  &kp N8  &kp N9  &kp PLUS     &none   &none   &none   &none  &none  &none
&none   &none   &kp N4  &kp N5  &kp N6  &kp N0       &none   &none   &none   &none  &none  &none
&trans  &none   &kp N1  &kp N2  &kp N3  &kp EQUAL    &none   &none   &none   &none  &none  &none
                        &trans  &trans  &trans       &trans  &trans  &trans
            >;
        };

        excel_layer_upper {
            bindings = <
&none   &tog 8  &kp HOME  &kp UP    &kp PG_UP  &none     &none   &none   &none   &none  &none  &none
&none   &none   &kp LEFT  &none     &kp RIGHT  &none     &none   &none   &none   &none  &none  &none
&trans  &none   &kp END   &kp DOWN  &kp PG_DN  &none     &none   &none   &none   &none  &none  &none
                          &trans    &trans     &trans    &trans  &trans  &trans
            >;
        };

        mouse_scroll_layer {
            bindings = <
&trans  &trans  &trans  &trans            &trans            &trans    &trans  &trans            &trans  &trans  &mwh SCROLL_RIGHT  &trans
&trans  &trans  &trans  &trans            &kp LEFT_CONTROL  &trans    &trans  &mwh SCROLL_LEFT  &trans  &trans  &trans             &trans
&trans  &trans  &trans  &mwh SCROLL_DOWN  &mwh SCROLL_UP    &trans    &trans  &trans            &trans  &trans  &trans             &trans
                        &trans            &trans            &trans    &trans  &trans            &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        shift_lower {
            if-layers = <2 1>;
            then-layer = <3>;
        };

        excel_layer {
            if-layers = <6 2>;
            then-layer = <7>;
        };
    };
};
